-- Copyright (C) 2018  Intel Corporation. All rights reserved.
-- Your use of Intel Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Intel Program License 
-- Subscription Agreement, the Intel Quartus Prime License Agreement,
-- the Intel FPGA IP License Agreement, or other applicable license
-- agreement, including, without limitation, that your use is for
-- the sole purpose of programming logic devices manufactured by
-- Intel and sold by Intel or its authorized distributors.  Please
-- refer to the applicable agreement for further details.

-- ***************************************************************************
-- This file contains a Vhdl test bench template that is freely editable to   
-- suit user's needs .Comments are provided in each section to help the user  
-- fill out necessary details.                                                
-- ***************************************************************************
-- Generated on "07/27/2021 17:01:29"
                                                            
-- Vhdl Test Bench template for design  :  e_my_recycle_management
-- 
-- Simulation tool : ModelSim-Altera (VHDL)
-- 

LIBRARY ieee;                                               
USE ieee.std_logic_1164.all;                                

ENTITY e_my_recycle_management_vhd_tst IS
END e_my_recycle_management_vhd_tst;
ARCHITECTURE e_my_recycle_management_arch OF e_my_recycle_management_vhd_tst IS
-- constants                                                 
-- signals                                                   
SIGNAL CLOCK_50 :STD_LOGIC :='0';
SIGNAL HEX0 : STD_LOGIC_VECTOR(6 DOWNTO 0);
SIGNAL HEX1 : STD_LOGIC_VECTOR(6 DOWNTO 0);
SIGNAL HEX2 : STD_LOGIC_VECTOR(6 DOWNTO 0);
SIGNAL HEX3 : STD_LOGIC_VECTOR(6 DOWNTO 0);
SIGNAL HEX4 : STD_LOGIC_VECTOR(6 DOWNTO 0);
SIGNAL HEX5 : STD_LOGIC_VECTOR(6 DOWNTO 0);
SIGNAL KEY : STD_LOGIC_VECTOR(3 DOWNTO 0):= "1111";;
SIGNAL LEDR : STD_LOGIC_VECTOR(9 DOWNTO 0);
SIGNAL SW : STD_LOGIC_VECTOR(2 DOWNTO 0):=(others=>'0');
COMPONENT e_my_recycle_management
	PORT (
	CLOCK_50 : IN STD_LOGIC;
	HEX0 : OUT STD_LOGIC_VECTOR(6 DOWNTO 0);
	HEX1 : OUT STD_LOGIC_VECTOR(6 DOWNTO 0);
	HEX2 : OUT STD_LOGIC_VECTOR(6 DOWNTO 0);
	HEX3 : OUT STD_LOGIC_VECTOR(6 DOWNTO 0);
	HEX4 : OUT STD_LOGIC_VECTOR(6 DOWNTO 0);
	HEX5 : OUT STD_LOGIC_VECTOR(6 DOWNTO 0);
	KEY : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
	LEDR : OUT STD_LOGIC_VECTOR(9 DOWNTO 0);
	SW : IN STD_LOGIC_VECTOR(2 DOWNTO 0)
	);
END COMPONENT;
BEGIN
	i1 : e_my_recycle_management
	generic map (n1 => 1, k1 => 2,n3 => 2, k3 => 4, n5 => 3, k5 => 8)
	PORT MAP (
-- list connections between master ports and signals
	CLOCK_50 => CLOCK_50,
	HEX0 => HEX0,
	HEX1 => HEX1,
	HEX2 => HEX2,
	HEX3 => HEX3,
	HEX4 => HEX4,
	HEX5 => HEX5,
	KEY => KEY,
	LEDR => LEDR,
	SW => SW
	);
	
	CLOCK_50 <= not CLOCK_50 after 10 ns;
	
	p_stimulus: process
	
		procedure P_sync_app(constant c_loop: integer) is
			variable v_count: integer := 0;
		begin
			loop_cnt: while v_count <= c_loop loop
				wait until rising_edge(CLOCK_50);
					v_count := v_count + 1;
			end loop loop_cnt;
		end procedure P_sync_app;
		
		procedure P_stable is
		begin
			SW(0)	<= '0';
			SW <= (others => '0');
			wait for 30 ns;
			SW(0)	<= '1';
		end procedure P_stable;
		
		procedure P_plastic is
		begin
			KEY(3 downto 0) <= "1110";
			wait for 30 ns;
			KEY(3 downto 0) <= "1111";
		end procedure P_plastic;
		
		procedure P_metal is
		begin
			KEY(3 downto 0) <= "1101";
			wait for 30 ns;
			KEY(3 downto 0) <= "1111";
		end procedure P_metal;
		
		procedure P_glass is
		begin
			KEY(3 downto 0) <= "1011";
			wait for 30 ns;
			KEY(3 downto 0) <= "1111";
		end procedure P_glass;

		procedure P_bio is
		begin
			KEY(3 downto 0) <= "0111";
			wait for 30 ns;
			KEY(3 downto 0) <= "1111";
		end procedure P_bio;
		----------------------------------------------------------------------------------------------------
		procedure p_hex_display(constant c_switchs: std_logic_vector(1 downto 0)) is
		begin
			SW(2 downto 1) <= c_switchs;
			--wait for 30 ns;
			--SW(5 downto 4) <= "00";
		end procedure p_hex_display;
		
	begin
		P_Stable;
		
		---------plastic1
		P_sync_app(5);
		p_hex_display("00");
		P_plastic;
		p_hex_display("00");
		P_sync_app(1);
		
		---------metal1
		p_hex_display("01");
		P_metal;
		p_hex_display("01");
		P_sync_app(1);
		
		---------Bio1
		p_hex_display("11");
		P_bio;
		p_hex_display("11");
		P_sync_app(1);

		---------Glass1
		p_hex_display("10");
		P_glass;
		p_hex_display("10");
		P_sync_app(30);
		
		---------plastic2
		p_hex_display("00");
		P_plastic;
		p_hex_display("00");
		P_sync_app(100);
		
		
		assert false report "--- END OF SIMULATION ---" severity failure;
	
	end process p_stimulus;                                         
END e_my_recycle_management_arch;